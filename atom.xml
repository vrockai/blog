<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>@vrockai</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://vrockai.github.io/"/>
  <updated>2017-10-28T09:54:42.275Z</updated>
  <id>https://vrockai.github.io/</id>
  
  <author>
    <name>Viliam Rockai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cypress.io Keycloak Integration</title>
    <link href="https://vrockai.github.io/2017/10/28/cypress-keycloak-intregration/"/>
    <id>https://vrockai.github.io/2017/10/28/cypress-keycloak-intregration/</id>
    <published>2017-10-28T09:54:42.279Z</published>
    <updated>2017-10-28T09:54:42.275Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cypress.io/" target="_blank" rel="external">Cypress.io</a> is getting some traction these days and since my favorite FE superstar <a href="https://twitter.com/bahmutov" target="_blank" rel="external">@bahmutov</a> promotes it a lot I couldn&#39;t help myself but get my hands dirty. WritingFE tests was always a pain and Cypress is promising a painless experience.</p><p>Going through the <a href="https://docs.cypress.io/guides/overview/why-cypress.html#What-Youâ€™ll-Learn" target="_blank" rel="external">docs</a> definitely was painless. Documentation is spiced with lots of best practices and I would say it&#39;s a good read about the FE/E2E testing in general. But still... while they stress you should not log in by <a href="https://docs.cypress.io/guides/references/best-practices.html#Visiting-External-Sites" target="_blank" rel="external">visiting the login page</a>, Cypress doesn&#39;t work with OAuth/OpenID out of the box.<a id="more"></a></p><p>My web-app is secured with <a href="http://www.keycloak.org/" target="_blank" rel="external">Keycloak</a> (KC) - an open-source identity and access management server. I had the privilege to work on KC while in Red Hat and I still got a strong emotional attachment to the project.I want to encourage people to use KC thus finding and sharing a proper way to use Cypress with KC secured web-app was inevitable. </p><p>After the docs, I&#39;ve started looking for help on the official Cypress.io <a href="https://gitter.im/cypress-io/cypress" target="_blank" rel="external">chat page</a>. I must admit the community there is friendly, ready to help (thanks, @MarcLoupias!) and I definitely got some good advice (although I was asking wrong questions - I&#39;ve only learnedthe <a href="https://stackoverflow.com/a/1087071/3252949" target="_blank" rel="external">difference between OAuth and OpenID</a> while writing this blog-post). Eventually, gorgeous <a href="https://github.com/mposolda" target="_blank" rel="external">mposolda</a> promptly pointed me to the right <a href="https://github.com/keycloak/keycloak/blob/master/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrentLoginTest.java#L275-L277" target="_blank" rel="external">test code in the KC repository</a> and after a brief inspection of the KC javascript client code, I was ready for a quick&amp;dirty solution. </p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I came up with a relatively simple KC integration. It&#39;s not perfect, but hey, it works, and it can help us get started with Cypress! It works OOTB if your web-app is secured the KC &quot;tutorial&quot; way, using the <a href="http://www.keycloak.org/docs/latest/securing_apps/topics/oidc/javascript-adapter.html" target="_blank" rel="external">javascript client</a>. You justneed to replace few constants in the code and you&#39;re ready to go. I&#39;ve basically mimicked the KC test, to create the login <a href="https://docs.cypress.io/api/cypress-api/custom-commands.html" target="_blank" rel="external">custom command</a>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">Cypress.Commands.add(<span class="string">'kcLogin'</span>, (username, password) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> kcRoot = <span class="string">'http://my.keycloak.com'</span>;</div><div class="line">  <span class="keyword">const</span> kcRealm = <span class="string">'MYrealm'</span>;</div><div class="line">  <span class="keyword">const</span> kcClient = <span class="string">'my-client'</span>;</div><div class="line">  <span class="keyword">const</span> kcRedirectUri = <span class="string">'http://localhost:3000/'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> loginPageRequest = &#123;</div><div class="line">    url: <span class="string">`<span class="subst">$&#123;kcRoot&#125;</span>/auth/realms/<span class="subst">$&#123;kcRealm&#125;</span>/protocol/openid-connect/auth`</span>,</div><div class="line">    qs: &#123;</div><div class="line">      client_id: kcClient,</div><div class="line">      redirect_uri: kcRedirectUri,</div><div class="line">      state: createUUID(),</div><div class="line">      nonce: createUUID(),</div><div class="line">      response_mode: <span class="string">'fragment'</span>,</div><div class="line">      response_type: <span class="string">'code'</span>,</div><div class="line">      scope: <span class="string">'openid'</span></div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// Open the KC login page, fill in the form with username and password and submit.</span></div><div class="line">  <span class="keyword">return</span> cy.request(loginPageRequest)</div><div class="line">    .then(submitLoginForm);</div><div class="line"></div><div class="line">  <span class="comment">////////////</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">submitLoginForm</span>(<span class="params">response</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> _el = <span class="built_in">document</span>.createElement(<span class="string">'html'</span>);</div><div class="line">    _el.innerHTML = response.body;</div><div class="line"></div><div class="line">    <span class="comment">// This should be more strict depending on your login page template.</span></div><div class="line">    <span class="keyword">const</span> loginForm = _el.getElementsByTagName(<span class="string">'form'</span>);</div><div class="line">    <span class="keyword">const</span> isAlreadyLoggedIn = !loginForm.length;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isAlreadyLoggedIn) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cy.request(&#123;</div><div class="line">      form: <span class="literal">true</span>,</div><div class="line">      method: <span class="string">'POST'</span>,</div><div class="line">      url: loginForm[<span class="number">0</span>].action,</div><div class="line">      followRedirect: <span class="literal">false</span>,</div><div class="line">      body: &#123;</div><div class="line">        username: username,</div><div class="line">        password: password        </div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Copy-pasted code from KC javascript client. It probably doesn't need to be </span></div><div class="line">  <span class="comment">// this complicated but I refused to spend time on figuring that out.</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createUUID</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> s = [];</div><div class="line">    <span class="keyword">var</span> hexDigits = <span class="string">'0123456789abcdef'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++) &#123;</div><div class="line">      s[i] = hexDigits.substr(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">0x10</span>), <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    s[<span class="number">14</span>] = <span class="string">'4'</span>;</div><div class="line">    s[<span class="number">19</span>] = hexDigits.substr((s[<span class="number">19</span>] &amp; <span class="number">0x3</span>) | <span class="number">0x8</span>, <span class="number">1</span>);</div><div class="line">    s[<span class="number">8</span>] = s[<span class="number">13</span>] = s[<span class="number">18</span>] = s[<span class="number">23</span>] = <span class="string">'-'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> uuid = s.join(<span class="string">''</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> uuid;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>The logout command is trivial:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Cypress.Commands.add(<span class="string">'kcLogout'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> kcRoot = <span class="string">'http://my.keycloak.com'</span>;</div><div class="line">  <span class="keyword">const</span> kcRealm = <span class="string">'MYrealm'</span>;</div><div class="line">  <span class="keyword">const</span> kcRedirectUri = <span class="string">'http://localhost:3000/'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> cy.request(&#123;</div><div class="line">    url: <span class="string">`<span class="subst">$&#123;kcRoot&#125;</span>/auth/realms/<span class="subst">$&#123;kcRealm&#125;</span>/protocol/openid-connect/logout`</span>,</div><div class="line">    qs: &#123;</div><div class="line">      redirect_uri: kcRedirectUri</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>The test itself now couldn&#39;t be easier to scaffold:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'Dummy test'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span>  &#123;</div><div class="line">    cy.kcLogin(<span class="string">'testuser'</span>, <span class="string">'********'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  afterEach(<span class="function"><span class="params">()</span> =&gt;</span>  &#123;</div><div class="line">    cy.kcLogout();</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'should render logged user name somewhere on the page'</span>, () =&gt;  &#123;</div><div class="line">    cy.visit(<span class="string">'/'</span>);</div><div class="line">    cy.get(<span class="string">'#login-test'</span>)</div><div class="line">      .should(<span class="string">'contain'</span>, <span class="string">'testuser'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Moving KC variables to <a href="https://docs.cypress.io/guides/guides/environment-variables.html#" target="_blank" rel="external">environment variables</a> will be the next natural step. Anyway, if you got any issues with this approach, or even better - suggestions, please comment.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.cypress.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cypress.io&lt;/a&gt; is getting some traction these days and since my favorite FE superstar 
&lt;a href=&quot;https://twitter.com/bahmutov&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@bahmutov&lt;/a&gt; promotes it a lot I couldn&amp;#39;t help myself but get my hands dirty. Writing
FE tests was always a pain and Cypress is promising a painless experience.&lt;/p&gt;
&lt;p&gt;Going through the &lt;a href=&quot;https://docs.cypress.io/guides/overview/why-cypress.html#What-Youâ€™ll-Learn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docs&lt;/a&gt; definitely was 
painless. Documentation is spiced with lots of best practices and I would say it&amp;#39;s a good read 
about the FE/E2E testing in general. But still... while they stress you should not log in by 
&lt;a href=&quot;https://docs.cypress.io/guides/references/best-practices.html#Visiting-External-Sites&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;visiting the login page&lt;/a&gt;,
 Cypress doesn&amp;#39;t work with OAuth/OpenID out of the box.
    
    </summary>
    
      <category term="QA" scheme="https://vrockai.github.io/categories/QA/"/>
    
    
      <category term="QA" scheme="https://vrockai.github.io/tags/QA/"/>
    
      <category term="Cypress" scheme="https://vrockai.github.io/tags/Cypress/"/>
    
      <category term="Keycloak" scheme="https://vrockai.github.io/tags/Keycloak/"/>
    
  </entry>
  
</feed>
